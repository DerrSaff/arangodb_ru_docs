extends ../../layout.jade

block title
  title Сортировка и лимиты

block sidebar
  include ../../partials/aql-sidebar.jade

block content
  :marked
    ## Ограничение числа результатов
    Нет необходимости всегда запрашивать все документы с помощью цикла FOR. Мы можем ограничить число полученных документов с помощью операции LIMIT()

    ```js
    FOR c IN Characters
        LIMIT 5
        RETURN c.name
    ```

    ```js
    [
      "Joffrey",
      "Tommen",
      "Tyrion",
      "Roose",
      "Tywin"
    ]
    ```

    LIMIT сопровождается числом, означающим максимальное количество документов. Однако есть и другой способ, который позволяет пропустить указанное количество документов и вернуть определённое количество следующих документов.

    ```js
    FOR c IN Characters
        LIMIT 2, 5
        RETURN c.name
    ```

    ```js
    [
      "Tyrion",
      "Roose",
      "Tywin",
      "Samwell",
      "Melisandre"
    ]
    ```

    Как можно увидеть, второй запрос пропустил первых два имени и вернул пять следующих (оба результаты включают в себя имена Tyrion, Roose и Tywin )
    
    ## Сортировка по имени

    Порядок, в котором отображались результаты запросов, в основном был случайным. Чтобы вернуть их в определённом порядке, мы можем добавить операцию SORT(). Она может оказать серьёзное влияние на результат запроса, если сочетать её с операцией LIMIT(), потому что ответ становится предсказуемым, если сначала провести сортировку.
    
    ```js
    FOR c IN Characters
      SORT c.name
      LIMIT 10
      RETURN c.name
    ```

    ```js
    [
      "Arya",
      "Bran",
      "Brienne",
      "Bronn",
      "Catelyn",
      "Cersei",
      "Daario",
      "Daenerys",
      "Davos",
      "Ellaria"
    ]
    ```

    Как видно, результат отсортирован по имени, после чего вернулось первых десять имён. Мы можем провести сортировку в обратном порядке, используя ключевое слово DESC:
    
    ```js
    FOR c IN Characters
      SORT c.name DESC
      LIMIT 10
      RETURN c.name
    ```

    ```js
    [
      "Ygritte",
      "Viserys",
      "Varys",
      "Tywin",
      "Tyrion",
      "Tormund",
      "Tommen",
      "Theon",
      "The High Sparrow",
      "Talisa"
    ]
    ```

    Первая сортировка была возрастающей, что используется по умолчанию, поэтому нет необходимости добавлять ключевое слово ASC (по возрастанию).
    
    ## Сортировка по нескольким атрибутам

    Предположим, мы хотим провести сортировку по фамилии. Многие персонажи имеют одинаковые фамилии. Итоговой порядок персонажей с одной и той же фамилией не определён. Мы можем сперва сортировать по фамилии, а после по имени:
    
    ```js
      FOR c IN Characters
      FILTER c.surname
      SORT c.surname, c.name
      LIMIT 10
      RETURN {
          surname: c.surname,
          name: c.name
      }
      ```

      ```js
      [
          { "surname": "Baelish", "name": "Petyr" },
          { "surname": "Baratheon", "name": "Joffrey" },
          { "surname": "Baratheon", "name": "Robert" },
          { "surname": "Baratheon", "name": "Stannis" },
          { "surname": "Baratheon", "name": "Tommen" },
          { "surname": "Bolton", "name": "Ramsay" },
          { "surname": "Bolton", "name": "Roose" },
          { "surname": "Clegane", "name": "Sandor" },
          { "surname": "Drogo", "name": "Khal" },
          { "surname": "Giantsbane", "name": "Tormund" }
      ]
      ```

      Таким образом, все документы сортированы по фамилии. Если фамилия одинакова для двух персонажей, для сортировки используются их имена.
      
      Обратите внимание, что в этом запросе фильтр применяется перед сортировкой, чтобы отсеять персонажей, у которых нет фамилии (у каких-то персонажей её нет, и в результате бы были значения null)

      ## Сортировка по возрасту

      Порядок также может определяться и числовым значением, например, возрастом:

      ```js
      FOR c IN Characters
          FILTER c.age
          SORT c.age
          LIMIT 10
          RETURN {
              name: c.name,
              age: c.age
          }
      ```

      ```js
      [
          { "name": "Bran", "age": 10 },
          { "name": "Arya", "age": 11 },
          { "name": "Sansa", "age": 13 },
          { "name": "Jon", "age": 16 },
          { "name": "Theon", "age": 16 },
          { "name": "Daenerys", "age": 16 },
          { "name": "Samwell", "age": 17 },
          { "name": "Joffrey", "age": 19 },
          { "name": "Tyrion", "age": 32 },
          { "name": "Brienne", "age": 32 }
      ]
      ```

      Фильтр применяется, чтобы избежать документов с неуказанным возрастом. Оставшиеся документы сортируются по возрасту в возрастающем порядке, и имя и возраст десяти самых молодых персонажей вернулись в качестве результата.

      Смотрите документацию операций <a href="#">SORT</a> и <a href="#">LIMIT</a> для более подробных сведений.