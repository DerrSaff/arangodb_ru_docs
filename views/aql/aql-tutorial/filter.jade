aside
  include ../../partials/aql-sidebar.jade

main
  :marked
    # Отбор документов

    До этого момента, мы или находили единственный документ, или возвращали целую коллекцию документов. Для отображения более подробных сведений мы использовали функцию DOCUMENT(), которая позволяет находить документы только по их ключу или ID.

    Чтобы искать документы, которые соответствуют определённым критериям, а не равенству ключу, в AQL существует операция FILTER, которая позволяет нам формулировать произвольные условия для отбора документов. 

    ## Условие равенства
    ```js
    FOR c IN Characters
      FILTER c.name == "Ned"
      RETURN c
    ```

    Условие фильтра звучит так: "имя атрибута документа персонажа должно быть равно строке Ned". Если условие выполняется, документ персонажа возращается. Это работает с любыми атрибутами:

    ```js
    FOR c IN Characters
      FILTER c.surname == "Stark"
      RETURN c
    ```

    ## Range conditions

    Строгое соответствие - это одно из возможных условий. Однако существует ряд других условий, которые мы можем использовать. Например, мы могли бы найти всех персонажей старше 12 лет:
 
    ```js
    FOR c IN Characters
      FILTER c.age >= 13
      RETURN c.name
    ```

    ```js
    [
      "Joffrey",
      "Tyrion",
      "Samwell",
      "Ned",
      "Catelyn",
      "Cersei",
      "Jon",
      "Sansa",
      "Brienne",
      "Theon",
      "Davos",
      "Jaime",
      "Daenerys"
    ]
    ```

    Оператор >= означает "больше или равно", так что каждый персонаж возрастом в 13 лет или старше возвращается (только их имя в примере). Мы можем найти имена и возраст всех персонажей моложе 13 лет, изменив оператор на меньше или равно и используя объектный синтаксис для определения ряда атрибутов:

    ```js
    FOR c IN Characters
      FILTER c.age < 13
      RETURN { name: c.name, age: c.age }
    ```

    ```js
    [
      { "name": "Tommen", "age": null },
      { "name": "Arya", "age": 11 },
      { "name": "Roose", "age": null },
      ...
    ]
    ```

    Вы можете заметить, что этот запрос возвращает имя и возпаст тридцати персонажей, большая часть из которых имеет возраст null. Причиной этому служит то, что null - это "резервное" (fallback) значение, которое ищется запросом, но такого атрибута в документе нет, и null в сравнении с числом считается как меньшее значение (смотрите <a href="">Порядок типов и значений</a>). Поэтому null в этом случае соответствует условию c.age < 13 (null < 13).
    
    ## Многочисленные условия
    Чтобы не позволить документам проходить фильтр без атрибута возраста, мы можем добавить второй критерий

    ```js
    FOR c IN Characters
        FILTER c.age < 13
        FILTER c.age != null
        RETURN { name: c.name, age: c.age }
    [
      { "name": "Arya", "age": 11 },
      { "name": "Bran", "age": 10 }
    ]
    ```

    То же самое выражение может быть записано с помошью булевого оператора AND вот так:

    ```js
    FOR c IN Characters
        FILTER c.age < 13 AND c.age != null
        RETURN { name: c.name, age: c.age }
    ```

    Dторое условие также могло бы иметь вид c.age > null.

    ## Альтернативные условия
    
    Если вы хотите, чтобы документы соответствовали тем или иным условиям, в том числе по разным атрибутам, используйте OR:

    ```js
    FOR c IN Characters
        FILTER c.name == "Jon" OR c.name == "Joffrey"
        RETURN { name: c.name, surname: c.surname }
    [
      { "name": "Joffrey", "surname": "Baratheon" },
      { "name": "Jon", "surname": "Snow" }
    ]
    ```

    Более подробно смотрите в разделе <a href="#">Операции отбора</a>.