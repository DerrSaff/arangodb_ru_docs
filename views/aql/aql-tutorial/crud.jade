extends ../../layout.jade

block title
  title CRUD-операции

block sidebar
  include ../../partials/aql-sidebar.jade

block content
  :marked
    # CRUD-операции

    **C**reate (Создание), **R**ead (Чтение), **U**pdate (Редактирование), **D**elete (Удаление)

    * [Создание документов](#create_documents)
    * [Чтение документов](#read_documents)
    * [Редактирование документов](#update_documents)
    * [Удаление документов](#delete_documents)

    ## <a name="create_documents"></a>Создание документов
    ----------------------
    Прежде чем создавать документы с помощью AQL, нужно создать для них хранилище - коллекцию. Управлять коллекциями можно с помощью веб-интерфейса, arangosh или драйвера, однако это невозможно сделать с помощью AQL.

  <img src="/images/Collection_Add.png">
  <img src="/images/Locations_Collection_Creation.png">

  :marked
    Кликните на COLLECTIONS в веб-интерфейсе, после Add Collection и введите Characters в качестве имени. Подтвердите с помощью Save. Новая коллекция должна появиться в списке.

    Затем кликните на QUERIES. Чтобы создать первый документ для коллекции с помощью AQL, используйте следующий AQL-запрос, который вы можете вставить в текстовую форму и запустить с помощью нажатия на Execute:

  <img src="/images/Query_Insert.png">

  :marked
    ```js
    INSERT {
        "name": "Ned",
        "surname": "Stark",
        "alive": true,
        "age": 41,
        "traits": ["A","H","C","N","P"]
    } INTO Characters
    ```

    Синтаксис: INSERT document INTO collectionName. Документ - это такой же объект, который используется в JavaScript или JSON, состоящий из пар свойств и значений. В AQL кавычки вокруг свойств опциональны. Свойства всегда являются строками, в то время как значения могут иметь различные типы.

    * null
    * boolean (true, false)
    * число (целочисленное и с плавающей запятой)
    * строка
    * массив
    * объект

    Имя и фамилия документа персонажа, который мы добавили, являются строками. Статус является булевым значением. Возраст - число. Характеристики - массив строк. Весь документ является объектом.
    Давайте добавим ещё несколько персонажей одним запросом:

    ```js
    LET data = [
      { "name": "Robert", "surname": "Baratheon", "alive": false, "traits": ["A","H","C"] },
      { "name": "Jaime", "surname": "Lannister", "alive": true, "age": 36, "traits": ["A","F","B"] },
      { "name": "Catelyn", "surname": "Stark", "alive": false, "age": 40, "traits": ["D","H","C"] },
      { "name": "Cersei", "surname": "Lannister", "alive": true, "age": 36, "traits": ["H","E","F"] },
      { "name": "Daenerys", "surname": "Targaryen", "alive": true, "age": 16, "traits": ["D","H","C"] },
      { "name": "Jorah", "surname": "Mormont", "alive": false, "traits": ["A","B","C","F"] },
      { "name": "Petyr", "surname": "Baelish", "alive": false, "traits": ["E","G","F"] },
      { "name": "Viserys", "surname": "Targaryen", "alive": false, "traits": ["O","L","N"] },
      { "name": "Jon", "surname": "Snow", "alive": true, "age": 16, "traits": ["A","B","C","F"] },
      { "name": "Sansa", "surname": "Stark", "alive": true, "age": 13, "traits": ["D","I","J"] },
      { "name": "Arya", "surname": "Stark", "alive": true, "age": 11, "traits": ["C","K","L"] },
      { "name": "Robb", "surname": "Stark", "alive": false, "traits": ["A","B","C","K"] },
      { "name": "Theon", "surname": "Greyjoy", "alive": true, "age": 16, "traits": ["E","R","K"] },
      { "name": "Bran", "surname": "Stark", "alive": true, "age": 10, "traits": ["L","J"] },
      { "name": "Joffrey", "surname": "Baratheon", "alive": false, "age": 19, "traits": ["I","L","O"] },
      { "name": "Sandor", "surname": "Clegane", "alive": true, "traits": ["A","P","K","F"] },
      { "name": "Tyrion", "surname": "Lannister", "alive": true, "age": 32, "traits": ["F","K","M","N"] },
      { "name": "Khal", "surname": "Drogo", "alive": false, "traits": ["A","C","O","P"] },
      { "name": "Tywin", "surname": "Lannister", "alive": false, "traits": ["O","M","H","F"] },
      { "name": "Davos", "surname": "Seaworth", "alive": true, "age": 49, "traits": ["C","K","P","F"] },
      { "name": "Samwell", "surname": "Tarly", "alive": true, "age": 17, "traits": ["C","L","I"] },
      { "name": "Stannis", "surname": "Baratheon", "alive": false, "traits": ["H","O","P","M"] },
      { "name": "Melisandre", "alive": true, "traits": ["G","E","H"] },
      { "name": "Margaery", "surname": "Tyrell", "alive": false, "traits": ["M","D","B"] },
      { "name": "Jeor", "surname": "Mormont", "alive": false, "traits": ["C","H","M","P"] },
      { "name": "Bronn", "alive": true, "traits": ["K","E","C"] },
      { "name": "Varys", "alive": true, "traits": ["M","F","N","E"] },
      { "name": "Shae", "alive": false, "traits": ["M","D","G"] },
      { "name": "Talisa", "surname": "Maegyr", "alive": false, "traits": ["D","C","B"] },
      { "name": "Gendry", "alive": false, "traits": ["K","C","A"] },
      { "name": "Ygritte", "alive": false, "traits": ["A","P","K"] },
      { "name": "Tormund", "surname": "Giantsbane", "alive": true, "traits": ["C","P","A","I"] },
      { "name": "Gilly", "alive": true, "traits": ["L","J"] },
      { "name": "Brienne", "surname": "Tarth", "alive": true, "age": 32, "traits": ["P","C","A","K"] },
      { "name": "Ramsay", "surname": "Bolton", "alive": true, "traits": ["E","O","G","A"] },
      { "name": "Ellaria", "surname": "Sand", "alive": true, "traits": ["P","O","A","E"] },
      { "name": "Daario", "surname": "Naharis", "alive": true, "traits": ["K","P","A"] },
      { "name": "Missandei", "alive": true, "traits": ["D","L","C","M"] },
      { "name": "Tommen", "surname": "Baratheon", "alive": true, "traits": ["I","L","B"] },
      { "name": "Jaqen", "surname": "H'ghar", "alive": true, "traits": ["H","F","K"] },
      { "name": "Roose", "surname": "Bolton", "alive": true, "traits": ["H","E","F","A"] },
      { "name": "The High Sparrow", "alive": true, "traits": ["H","M","F","O"] }
    ]

    FOR d IN data
        INSERT d INTO Characters
    ```

    Ключевое слово LET определяет переменную data и массив объектов как её значение, так что LET variableName = valueExpression и выражение являются литералом объявления массива наподобие [ {...}, {...}, ... ].

    FOR variableName IN expression используется для итерации по каждому элементу data. В каждом цикле один элемент присваивается переменной d. Эта переменная после используется в операторе INSERT вместо литерала объявления объекта. Вот как это выглядит:

    ```js
    INSERT {
        "name": "Robert",
        "surname": "Baratheon",
        "alive": false,
        "traits": ["A","H","C"]
    } INTO Characters

    INSERT {
        "name": "Jaime",
        "surname": "Lannister",
        "alive": true,
        "age": 36,
        "traits": ["A","F","B"]
    } INTO Characters
    ```

    Примечание: AQL не позволяет выполнять несколько INSERT-операций, которые работают с одной и той же коллекцией в одном запросе. Тем не менее это можно осуществить с помощью цикла FOR, как это есть в предыдущем запросе.

    ## <a name="read_documents"></a> Чтение документов

    Теперь в Characters существует пара документов. Мы можем снова получить их с помощью цикла FOR. В этот раз, однако, мы используем его, чтобы пройти по всем документам в коллекции вместо массива.

    ```js
    FOR c IN Characters
      RETURN c
    ```

    Синтаксис цикла выглядит так: FOR variableName IN collectionName. Для каждого документа в коллекции, переменной "c" присваивается документ, который возвращается в каждой итерации цикла. Запрос возвращает всех персонажей, которых мы прежде сохранили.

    Среди них должен быть и Нед Старк, схожий с этим примером:

    ```js
    {
      "_key": "2861650",
      "_id": "Characters/2861650",
      "_rev": "_V1bzsXa---",
      "name": "Ned",
      "surname": "Stark",
      "alive": true,
      "age": 41,
      "traits": ["A","H","C","N","P"]
    },
    ```

    Этот документ содержит четыре атрибута, которые добавили мы, и три атрибута, которые были добавлены базой данных. Каждый документ нуждается в уникальном ключе _key, который обозначает его внутри коллекции. _id - это вычисляемое свойство, являющееся сочетанием названия коллекции, слеша "/"" и ключа документа. Оно уникально обозначает документ внутри базы данных. _rev - ID ревизии, контрорулируемое системой.

    Ключи документов могут быть определены пользователем при создании документов, в ином случае уникальное значение присваивается автоматически. Оно не может быть изменено позже. Все три системных параметра, начинающихся со знака подчёркивания "_", доступны только для чтения.

    Мы можем использовать либо ключ документа, либо ID документа, чтобы получить определённый документ с помощью функции DOCUMENT():

    ```js
    RETURN DOCUMENT("Characters", "2861650")
    // --- or ---
    RETURN DOCUMENT("Characters/2861650")
    ```

    ```js
    [
      {
        "_key": "2861650",
        "_id": "Characters/2861650",
        "_rev": "_V1bzsXa---",
        "name": "Ned",
        "surname": "Stark",
        "alive": true,
        "age": 41,
        "traits": ["A","H","C","N","P"]
      }
    ]
    ```

    Замечание: у вас будут другие ключи у документов. Соответствубще измените запросы. Здесь, "2861650" - это ключ для документа с Недом Старком, и "2861653" для Кейтилин Старк.

    Функция DOCUMENT() также позволяет получить несколько документов сразу:
    
    ```js
    RETURN DOCUMENT("Characters", ["2861650", "2861653"])
    // --- or ---
    RETURN DOCUMENT(["Characters/2861650", "Characters/2861653"])
    ```

    ```js
    [
      [
        {
          "_key": "2861650",
          "_id": "Characters/2861650",
          "_rev": "_V1bzsXa---",
          "name": "Ned",
          "surname": "Stark",
          "alive": true,
          "age": 41,
          "traits": ["A","H","C","N","P"]
        },
        {
          "_key": "2861653",
          "_id": "Characters/2861653",
          "_rev": "_V1bzsXa--B",
          "name": "Catelyn",
          "surname": "Stark",
          "alive": false,
          "age": 40,
          "traits": ["D","H","C"]
        }
      ]
    ]
    ```

    Смотрите документацию функции DOCUMENT() для более подробных сведений.
    
    ## <a name="update_documents"></a> Изменение документов

    Согласно документу с Недом Старком, он жив. Когда мы узнаём, что он умер, нам нужно изменить соответствующий атрибут. Давайте изменим существующий документ:

    ```js
    UPDATE "2861650" WITH { alive: false } IN Characters
    ```

    Синтаксис: UPDATE documentKey WITH object IN collectionName. Эта команда обновляет определённый документ с перечисленными атрибутами (или добавляет их, если они отсутствуют), но оставляет всё остальное нетронутым. Чтобы заменить весь документ целиком, вы можете использовать REPLACE вместо UPDATE:

    ```js
    REPLACE "2861650" WITH {
      name: "Ned",
      surname: "Stark",
      alive: false,
      age: 41,
      traits: ["A","H","C","N","P"]
    } IN Characters
    ```

    Это также работает в цикле, например, чтобы добавить новый атрибут ко всем документам:

    ```js
    FOR c IN Characters
      UPDATE c WITH { season: 1 } IN Characters
    ```

    Переменная "c" используется вместо значения ключа документа, чтобы обновить документ. Запрос добавляет атрибут "сезон" ко всем документам. Вы можете ознакомиться с получившимся результатом, выполнив ещё раз запрос на получение всех документов в коллекции:

    ```js
    FOR c IN Characters
      RETURN c
    ```

    ```js
    [
      [
        {
          "_key": "2861650",
          "_id": "Characters/2861650",
          "_rev": "_V1bzsXa---",
          "name": "Ned",
          "surname": "Stark",
          "alive": false,
          "age": 41,
          "traits": ["A","H","C","N","P"],
          "season": 1
        },
        {
          "_key": "2861653",
          "_id": "Characters/2861653",
          "_rev": "_V1bzsXa--B",
          "name": "Catelyn",
          "surname": "Stark",
          "alive": false,
          "age": 40,
          "traits": ["D","H","C"],
          "season": 1
        },
        {
            ...
        }
      ]
    ]
    ```

    ## <a name="delete_documents"></a> Удаление документов
    
    Чтобы полностью удалить документы в коллекции, существует операция REMOVE. Она работает схожим образом с операцией изменения, но без части WITH:

    ```js
    REMOVE "2861650" IN Characters
    ```
    Это может быть использовано в цикле, чтобы эффективно очистить коллекцию:

    ```js
    FOR c IN Characters
        REMOVE c IN Characters
    ```
    
    Замечание: выполните запросы на вставку данных всех персонажей из начала руководства, прежде чем вы перейдёте к следующей главе, чтобы было с чем работать в дальнейшем.
